# -*- coding: utf-8 -*-
"""Trabalho_BCC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nL8027u_CTsrcmP60AFwWbnqbdBL9Bo6

# Gráficos: Crescimento da População Mundial por país entre os anos 1960 e 2021
"""

# Commented out IPython magic to ensure Python compatibility.
#Instalação de bibliotecas:

import matplotlib.pyplot as plt #Biblioteca usada para a plotagem dos gráficos
# %matplotlib inline
from matplotlib.ticker import FuncFormatter 
from matplotlib.image import pil_to_array 
import pandas as pd #Biblioteca usada para visualização e manipulação de dataframes (csv)
from google.colab import files 
arquivos = files.upload() #Função para o upload do dataframe

pip install googletrans==3.1.0a0 #Biblioteca de tradução do Google

df = pd.read_csv("World-population-by-countries-dataset.csv") #Leitura do arquivo csv
df = df.rename(columns={'Country Name': 'Country'}) #Renomear coluna "Country Name" para "Country" para melhor rodar o código
pais = input("Insira o País: ") #Espaço para o usuário escolher qual país filtrar da tabela.

from googletrans import Translator #Importação da função tradutor
translator = Translator() 
paisTraduzido = translator.translate(pais, dest='en', src='pt') #Variável nova com o nome do páis traduzido e parâmetro de tradução (Português para Inglês)

df = df.query("Country == @paisTraduzido.text") #Filtragem da tabela para o país escolhido pelo usuário

del df['Country Code'] #Exclusão de coluna irrelevante para a plotagem de gráficos
del df['Country'] #Exclusão de coluna irrelevante para a plotagem de gráficos
df = df.transpose() #Aqui é feita a transposicção do dataframe (Linha por Coluna e Coluna por Linnha), pois assim fica melhor para o gráfico ser plotado
df = df.reset_index() #Resetamento do índice da tabela, sem isso o Ano seria escolhido como índice e assim não seria possível plotar o gráfico
df.columns =['Ano', 'População'] #Novos nomes das Colunas em Português
df['Ano'] = df['Ano'].astype(int) #Transformando o valor dos anos de string para integer para assim plotar o gráfico com mais facilidade

anoUm = int(input("Insira o Ano Inicial: ")) #Espaço para o usuário escolher o ano de início para plotagem do gráfico
anoDois = int(input("Insira o Ano Final: ")) #Espaço para o usuário escolher o ano de Términio para plotagem do gráfico

df = df.query("Ano >= @anoUm and Ano <= @anoDois") #Filtragem da tabela para o intervalo de tempo escolhido pelo usuário

x = df["Ano"] #Atriuição dos anos esolhidos pelo usuário para o eixo X
y = df["População"] #Atribuição da população em dado ano do país escolhido pelo usuário para o eixo Y

plt.title("Crescimento populacional do(a) {}".format(pais)+"\nEntre os anos " +str(anoUm)+ " e " +str(anoDois)) #Customização do título do gráfico, usando o nome do país e intervalo de tempo como variáveis
plt.xlabel("Ano") #Legenda do eixo X
plt.ylabel("População\n(em Milhões)") #Legenda do eixo Y

def millions_formatter(x, pos):
    return f'{x / 1000000}'
plt.gca().yaxis.set_major_formatter(FuncFormatter(millions_formatter)) #Função para sempre usar as casas dos milhões no eixo Y

plt.plot(x, y) #Plotagem do gráfico
plt.grid() #Mostrar grade 
plt.legend() #Mostrar Legenda
plt.show() #Mostrar Gráfico

"""# Gráficos: Comparação de Crescimento Populacional por país"""

df = pd.read_csv("World-population-by-countries-dataset.csv") #Leitura do arquivo csv
df = df.rename(columns={'Country Name': 'Country'}) #Renomear coluna "Country Name" para "Country" para melhor rodar o código

lis = ["South Sudan", "Chad", "Niger", "Central African Republic", "Burundi"] #Lista de países usada na comparação

x = 0 #Criação da variável x para ser usada no eixo X do gráfico
y0 = 0
y1 = 0
y2 = 0
y3 = 0
y4 = 0 #Variáves que servirão de eixo Y para os países listados acima

def graficos(): #Função para descobrir o Y (População) dos países 
  for i in lis: #Laço que atribui o valor Y para cada país a partir de seu índice na lista "lis"
    index = lis.index(i) #Variável que recebe o valor do índice de cada elemento na lista "lis"
    dfg = df.query("Country == @i") #Filtragem do país no dataframe
    del dfg['Country Code'] #Exclusão de coluna irrelevante para a plotagem de gráficos
    del dfg['Country'] #Exclusão de coluna irrelevante para a plotagem de gráficos
    dfg = dfg.transpose() #Aqui é feita a transposicção do dataframe (Linha por Coluna e Coluna por Linnha), pois assim fica melhor para o gráfico ser plotado
    dfg = dfg.reset_index() #Resetamento do índice da tabela, sem isso o Ano seria escolhido como índice e assim não seria possível plotar o gráfico
    dfg.columns =['Ano', 'População'] #Novos nomes das Colunas em Português
    dfg['Ano'] = dfg['Ano'].astype(int) #Transformando o valor dos anos de string para integer para assim plotar o gráfico com mais facilidade
    globals()["x"] = dfg["Ano"] #Atriuição dos anos do dataframe para o eixo X
    globals()['y%s' % index] = dfg["População"] #Atribuição da população em dado ano do país da lista "lis" de acordo seu índice

graficos() #Chamando a função acima


plt.title("Crescimento populacional dos países menos desenvolvidos\nEntre os anos 1960 e 2021") #Customização do título do gráfico baseado nos países escolhidos
plt.xlabel("Ano") #Legenda do eixo X
plt.ylabel("População\n(em Milhões)") #Legenda do eixo Y

def millions_formatter(x, pos):
    return f'{x / 1000000}'
plt.gca().yaxis.set_major_formatter(FuncFormatter(millions_formatter)) #Função para sempre usar as casas dos milhões no eixo Y

plt.plot(x, y0, label = "Sudão do Sul") #Plotagem e Legenda da curva da população do país com indice 0 na lista "lis"
plt.plot(x, y1, label = "Chade") #Plotagem e Legenda da curva da população do país com indice 1 na lista "lis"
plt.plot(x, y2, label = "Níger") #Plotagem e Legenda da curva da população do país com indice 2 na lista "lis"
plt.plot(x, y3, label = "República Centro-Africana") #Plotagem e Legenda da curva da população do país com indice 3 na lista "lis"
plt.plot(x, y4, label = "Burundi") #Plotagem e Legenda da curva da população do país com indice 4 na lista "lis"
plt.grid() #Mostrar Grade 
plt.legend() #Mostrar Legenda
plt.show() #Mostrar Gráfico